/*
 * This file is generated by jOOQ.
 */
package com.mgt.earthquake.jooqmodel.tables


import com.mgt.earthquake.jooqmodel.DefaultSchema
import com.mgt.earthquake.jooqmodel.keys.QUAKE_PKEY
import com.mgt.earthquake.jooqmodel.keys.QUAKE_QUAKEID_KEY
import com.mgt.earthquake.jooqmodel.tables.records.QuakeRecord

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row7
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Quake(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, QuakeRecord>?,
    aliased: Table<QuakeRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<QuakeRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>quake</code>
         */
        val QUAKE: Quake = Quake()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<QuakeRecord> = QuakeRecord::class.java

    /**
     * The column <code>quake.id</code>.
     */
    val ID: TableField<QuakeRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>quake.latitude</code>.
     */
    val LATITUDE: TableField<QuakeRecord, Double?> = createField(DSL.name("latitude"), SQLDataType.DOUBLE.nullable(false), this, "")

    /**
     * The column <code>quake.longitude</code>.
     */
    val LONGITUDE: TableField<QuakeRecord, Double?> = createField(DSL.name("longitude"), SQLDataType.DOUBLE.nullable(false), this, "")

    /**
     * The column <code>quake.magnitude</code>.
     */
    val MAGNITUDE: TableField<QuakeRecord, Double?> = createField(DSL.name("magnitude"), SQLDataType.DOUBLE.nullable(false), this, "")

    /**
     * The column <code>quake.quakeid</code>.
     */
    val QUAKEID: TableField<QuakeRecord, String?> = createField(DSL.name("quakeid"), SQLDataType.VARCHAR(200).nullable(false), this, "")

    /**
     * The column <code>quake.quaketime</code>.
     */
    val QUAKETIME: TableField<QuakeRecord, String?> = createField(DSL.name("quaketime"), SQLDataType.VARCHAR(200).defaultValue(DSL.field("NULL::character varying", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>quake.title</code>.
     */
    val TITLE: TableField<QuakeRecord, String?> = createField(DSL.name("title"), SQLDataType.VARCHAR(200).defaultValue(DSL.field("NULL::character varying", SQLDataType.VARCHAR)), this, "")

    private constructor(alias: Name, aliased: Table<QuakeRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<QuakeRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>quake</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>quake</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>quake</code> table reference
     */
    constructor(): this(DSL.name("quake"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, QuakeRecord>): this(Internal.createPathAlias(child, key), child, key, QUAKE, null)
    override fun getSchema(): Schema? = if (aliased()) null else DefaultSchema.DEFAULT_SCHEMA
    override fun getIdentity(): Identity<QuakeRecord, Long?> = super.getIdentity() as Identity<QuakeRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<QuakeRecord> = QUAKE_PKEY
    override fun getUniqueKeys(): List<UniqueKey<QuakeRecord>> = listOf(QUAKE_QUAKEID_KEY)
    override fun `as`(alias: String): Quake = Quake(DSL.name(alias), this)
    override fun `as`(alias: Name): Quake = Quake(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Quake = Quake(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Quake = Quake(name, null)

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row7<Long?, Double?, Double?, Double?, String?, String?, String?> = super.fieldsRow() as Row7<Long?, Double?, Double?, Double?, String?, String?, String?>
}
