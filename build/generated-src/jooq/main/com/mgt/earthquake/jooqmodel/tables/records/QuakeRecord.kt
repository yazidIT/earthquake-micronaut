/*
 * This file is generated by jOOQ.
 */
package com.mgt.earthquake.jooqmodel.tables.records


import com.mgt.earthquake.jooqmodel.tables.Quake

import javax.persistence.Column
import javax.persistence.Entity
import javax.persistence.GeneratedValue
import javax.persistence.GenerationType
import javax.persistence.Id
import javax.persistence.Table
import javax.validation.constraints.NotNull
import javax.validation.constraints.Size

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record7
import org.jooq.Row7
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
@Entity
@Table(
    name = "quake"
)
open class QuakeRecord() : UpdatableRecordImpl<QuakeRecord>(Quake.QUAKE), Record7<Long?, Double?, Double?, Double?, String?, String?, String?> {

    @get:Id
    @get:GeneratedValue(strategy = GenerationType.IDENTITY)
    @get:Column(name = "id", nullable = false, precision = 19)
    var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    @get:Column(name = "latitude", nullable = false, precision = 22)
    @get:NotNull
    var latitude: Double?
        set(value): Unit = set(1, value)
        get(): Double? = get(1) as Double?

    @get:Column(name = "longitude", nullable = false, precision = 22)
    @get:NotNull
    var longitude: Double?
        set(value): Unit = set(2, value)
        get(): Double? = get(2) as Double?

    @get:Column(name = "magnitude", nullable = false, precision = 22)
    @get:NotNull
    var magnitude: Double?
        set(value): Unit = set(3, value)
        get(): Double? = get(3) as Double?

    @get:Column(name = "quakeid", length = 255)
    @get:Size(max = 255)
    var quakeid: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    @get:Column(name = "quaketime", length = 255)
    @get:Size(max = 255)
    var quaketime: String?
        set(value): Unit = set(5, value)
        get(): String? = get(5) as String?

    @get:Column(name = "title", length = 255)
    @get:Size(max = 255)
    var title: String?
        set(value): Unit = set(6, value)
        get(): String? = get(6) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row7<Long?, Double?, Double?, Double?, String?, String?, String?> = super.fieldsRow() as Row7<Long?, Double?, Double?, Double?, String?, String?, String?>
    override fun valuesRow(): Row7<Long?, Double?, Double?, Double?, String?, String?, String?> = super.valuesRow() as Row7<Long?, Double?, Double?, Double?, String?, String?, String?>
    override fun field1(): Field<Long?> = Quake.QUAKE.ID
    override fun field2(): Field<Double?> = Quake.QUAKE.LATITUDE
    override fun field3(): Field<Double?> = Quake.QUAKE.LONGITUDE
    override fun field4(): Field<Double?> = Quake.QUAKE.MAGNITUDE
    override fun field5(): Field<String?> = Quake.QUAKE.QUAKEID
    override fun field6(): Field<String?> = Quake.QUAKE.QUAKETIME
    override fun field7(): Field<String?> = Quake.QUAKE.TITLE
    override fun component1(): Long? = id
    override fun component2(): Double? = latitude
    override fun component3(): Double? = longitude
    override fun component4(): Double? = magnitude
    override fun component5(): String? = quakeid
    override fun component6(): String? = quaketime
    override fun component7(): String? = title
    override fun value1(): Long? = id
    override fun value2(): Double? = latitude
    override fun value3(): Double? = longitude
    override fun value4(): Double? = magnitude
    override fun value5(): String? = quakeid
    override fun value6(): String? = quaketime
    override fun value7(): String? = title

    override fun value1(value: Long?): QuakeRecord {
        this.id = value
        return this
    }

    override fun value2(value: Double?): QuakeRecord {
        this.latitude = value
        return this
    }

    override fun value3(value: Double?): QuakeRecord {
        this.longitude = value
        return this
    }

    override fun value4(value: Double?): QuakeRecord {
        this.magnitude = value
        return this
    }

    override fun value5(value: String?): QuakeRecord {
        this.quakeid = value
        return this
    }

    override fun value6(value: String?): QuakeRecord {
        this.quaketime = value
        return this
    }

    override fun value7(value: String?): QuakeRecord {
        this.title = value
        return this
    }

    override fun values(value1: Long?, value2: Double?, value3: Double?, value4: Double?, value5: String?, value6: String?, value7: String?): QuakeRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        return this
    }

    /**
     * Create a detached, initialised QuakeRecord
     */
    constructor(id: Long? = null, latitude: Double? = null, longitude: Double? = null, magnitude: Double? = null, quakeid: String? = null, quaketime: String? = null, title: String? = null): this() {
        this.id = id
        this.latitude = latitude
        this.longitude = longitude
        this.magnitude = magnitude
        this.quakeid = quakeid
        this.quaketime = quaketime
        this.title = title
    }

    /**
     * Create a detached, initialised QuakeRecord
     */
    constructor(value: com.mgt.earthquake.jooqmodel.tables.pojos.Quake?): this() {
        if (value != null) {
            this.id = value.id
            this.latitude = value.latitude
            this.longitude = value.longitude
            this.magnitude = value.magnitude
            this.quakeid = value.quakeid
            this.quaketime = value.quaketime
            this.title = value.title
        }
    }
}
